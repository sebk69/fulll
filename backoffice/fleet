#!/bin/bash

# Function to display usage instructions
usage() {
    echo "Usage:"
    echo "  $0 create <user-id>"
    echo "  $0 register-vehicle <vehicle-license-plate> <user-id>"
    echo "  $0 localize-vehicle <fleet-id> <vehicle-license-plate> <latitude> <longitude> [<altitude>]"
    exit 1
}

# Ensure at least one argument is passed
if [ $# -lt 1 ]; then
    echo "Error: No arguments provided."
    usage
fi

# Check if Docker is installed and determine the appropriate command
if [ -f '/bin/docker' ]; then
    if ! docker ps | grep -q backoffice; then
        echo "Starting Docker services..."
        docker compose up -d --build || { echo "Failed to start Docker services."; exit 1; }
        bin/composer update || { echo "Failed to update dependencies."; exit 1; }
    fi
    command="bin/console-docker"
else
    command="bin/console"
fi

# Execute missing database layers
./$command swoole:entity-manager:layers-execute

# Process commands and validate arguments
case "$1" in
    create)
        if [ -z "$2" ]; then
            echo "Error: Missing <username> for 'create' command."
            usage
        fi
        ./$command app:user:create "$2"
        ;;

    register-vehicle)
        if [ -z "$2" ] || [ -z "$3" ]; then
            echo "Error: Missing arguments for 'register-vehicle' command."
            echo "Required: <vehicle-id> <owner-id>"
            usage
        fi
        ./$command app:vehicle:register "$2" "$3"
        ;;

    localize-vehicle)
        if [ -z "$2" ] || [ -z "$3" ]; then
            echo "Error: Missing arguments for 'localize-vehicle' command."
            echo "Required: <fleet-id> <vehicle-license-plate> <latitude> <longitude>"
            usage
        fi
        ./$command app:vehicle:park "$2" "$3" "$4" "$5" "$6"
        ;;

    *)
        echo "Error: Unknown command '$1'."
        usage
        ;;
esac